Here is a list of things we intend to do at some point; 
suggestions are welcome.


- Concrete structures :
    we will add some facilities to ease the situation when one wants
    to work with a concrete structure (say, binary relations). In
    particular, the user should not have to unfold notations or to
    fold concrete definitions.

- Cooperation with the standard library for relations :
    file RelAlg.v defines the Kleene algebra of heterogeneous binary
    relations, with our own set of definitions ; we shall provide a
    similar file for homogeneous binary relations, as defined in Coq'
    standard library.

- Efficiency of the kleene_reflexivity tactic :
    we are rather satisfied with the current efficiency of this tactic
    (almost instantaneous on simple, casual examples). It seems that
    there is room for a wide range of optimisations, however...

- Counter-examples in case of failure :
    at some point, [kleene_reflexivity] will produce a counter-example
    in case it fails.

- Non idempotent semirings :
    we considered only idempotent (non-commutative) semirings in this
    development. This is because we wanted to work with binary relations.
    It should be easy, however, to isolate the idempotence hypothesis, 
    so as to provide tools for non necessarily idempotents semirings. 
    This would fill the gap with existing Coq tactics (ring), that handle 
    the commutative case.

- Matrix library : 
    we need to clean up this part of the code, and to add some
    documentation, in order to release it as a library for working
    with matrices in a non-commutative setting. Some lemmas and
    function will be renamed.

- Compilation time :
    our library is really slow to compile ; the next release of this
    project should rely on a different approach for the
    kleene_reflexivity tactic. As a consequence, we expect the overall
    compilation time to be significantly reduced

